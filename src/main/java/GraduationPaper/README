增加的几组对比实验：
由于EDFC的概率转移表可能存在某些不合理性，因此，对于EDFC的相关实验采用自己的概率转移表

1. 由于EDFC的数据包数量是我们的1.4508倍，因此作出x:随机游走长度 y:数据传播所消耗的能量（定义单位能量即1个数据包为1J，所以纵轴表示数据包的数量J），注意：
这里我们需要将ELFC和OELFC的一次步长+二次步长的和作为随机游走的长度与EDFC进行比较（不太好实现，因为不太容易找到ELFC的一次+二次 等于EDFC的一次的情况，因此
我们考虑先按照一次步长比较EDFC和ELFC的存储情况，后面再通过一次步长的改变，EDFC和ELFC的总步长的变化来进行判断）ok


// TODO OELFC为什么需要更长的随机游走步长？ 会不会是出错了？
// TODO ELFC和OELFC效果这么差是不是因为没有按照度分布函数的大小进行编码？如果进行额外数据包发送编码阶段再选择d个不同数据包会不会效果更好？
// TODO 为什么发送的冗余数据包越多1度的数据包数量就越少？？？ 数据包越多，节点需要编码的本身由度分布函数产生的要求度就高，那么高度数据包就更多了
// TODO 看一下正常的LT码数据解码是否正常，感觉可能是实验代码的错误
// TODO 为什么包多了，解码率却下来了？而且只差100多个？ 最需要解决！

2. 比较额外的存储开销，由于EDFC需要最后对收到的数据包选择进行编码，因此做出x:需要进行编码而停留不同的数据包数量 y：因此所消耗的编码开销（ELFC和OELFC x从0到100
，y轴一直都是1，而EDFC x从0到100是呈线性上升的），并且给出本文规模所需的存储开销（EDFC和OELFC算上）ok

3. 通过柱状图的形式来展现解码效率，即(需要访问的节点数量/源节点数量)作为解码率，作出x:随机游走长度 y：解码率的柱状图

4. 利用改进后的度分布函数在大规模网络中进行实验，目前只做了理想LT和改进后的度分布函数进行比较，可以考虑将新的度分布函数加入到ELFC和OELFC中查看相应的效果

5. EDFC的单向随机游走和ELFC的多播的数据包传播次数对比,以及随步长增加的传播次数差值（一个是单播传播次数，一个是多播传播次数）（暂时先放着没做）

6. 新的度分布函数的度分布情况（每个度大小应取的概率）

7. 新的度分布函数的容错性

8. 新的度分布函数的译码开销

9. 收集阶段数据收集周期：理想LT需要逐个轮询，而ELFC和OELFC只需要访问边缘节点（画出成功解码需要访问的节点数量曲线图）ok

10.每个节点的理想度和实际度的偏差曲线图 (效果不太好先不做了)

11. 计算一下译码开销(N - k) / k,即(需要成功译码访问的节点数量 - 源数据的数量)/源数据的数量

12. EDFC的单次转发需要冗余数据包，自转发概率较高；二次转发为了能够保证数据包均匀置于网络中游走，需要减少自转发的概率，因此采用新的概率转移表

13. 高估K和N的大小对网络整体的解码情况的影响（注意：高估K和N只应该对数据包总量b和稳态分布π产生影响）ok
查看译码开销（此处的解码率是（访问的节点数量-5000）/5000）随高估的值的影响

几个还可以继续深入研究的点：
1. 空存储问题，如何解决网络中有些节点没有收到编码数据包（已经解决，通过多发编码数据包） ok
2. 对度分布函数的优化（还需要看几篇论文）


//TODO 注意：对于所有的感知节点而言，它自身的packList天生就是应该包含自身的信息的，因此初始化的时候应该将这一步加上去(因为本来就有自转发的可能，所以
//TODO 这一步应该不需要)


EDFC的相关实现代码细节：
1. 对产生编码数据包公式进行修改，增加系数1.4508倍的感知数据包数量
2. 随机游走策略需要进行修正，EDFC不需要二次随机游走
3. EDFC中每个节点的编码操作进行修正，并非接收一个数据包就进行编码，而是最后阶段再选择数据包编码，注意，需要额外的存储空间做数据包存储
4. 记住，EDFC和其他编码策略进行步长比较的时候，要用EDFC的walkLength和其他编码的(walkLength + REDUNDANCY_WALK_LENGTH)进行比较



***现在需要解决的问题：
1. EDFC的所有数据包存储的数据都是0，导致无法进行成功解码(已解决，因为之前编码中的代码错误了)
2. 以前的代码是有问题的，并没有严格按照度分布函数，而是对于网络中的每个节点来说，只编自己以前没编过的，编过的在二次转发



使得1度数据和2度数据所占比例小于50，额外的增高1度数据比例是为了能够减少译码开销；
